---
layout: post
title: Subtree
date: 2015-10-21 02:56:22.000000000 -04:00
tags: algorithm
categories:
- Binary Search Tree
author: Jason
---
<p><strong><em>You have two every large binary trees: T1, with millions of nodes, and T2, with hundreds of nodes. Create an algorithm to decide if T2 is a subtree of T1.</em></strong></p>


``` java
public class Solution {
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        // write your code here
        if (T2 == null) return true;
        //we must check T2 first, since if T2 == null and T1 == null the result should be true
        if (T1 == null) return false;//null is not subtree of null
        return isSameTree(T1, T2) || isSubtree(T1.left, T2) || isSubtree(T1.right, T2);
    }
    
    public boolean isSameTree(TreeNode T1, TreeNode T2) {
        if (T1 == null && T2 == null) return true;
        //both gets to leaf
        if (T1 == null || T2 == null) return false;
        if (T1.val != T2.val) {
            return false;
        } else {
            return isSameTree(T1.left, T2.left) && isSameTree(T1.right, T2.right);
        }
    }
}
```
