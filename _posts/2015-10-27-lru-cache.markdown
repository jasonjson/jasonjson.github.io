---
layout: post
title: LRU Cache
date: 2015-10-27 16:36:25.000000000 -04:00
categories:
- Data Structure
author: Jason
---
<p><strong><em>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set. get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</em></strong></p>


<p><a href="http://www.cnblogs.com/springfor/p/3869393.html">Read more</a></p>

``` java
public class Solution {
    private int capacity;
    DoubleLinkedNode head, tail;
    HashMap<Integer, DoubleLinkedNode> map;
    public Solution(int capacity) {
        this.capacity = capacity;
        map = new HashMap<Integer, DoubleLinkedNode>();
        head = null;
        tail = null;
    }
    public int get(int key) {
        if (map.containsKey(key)) {
            DoubleLinkedNode oldNode = map.get(key);
            removeNode(oldNode);
            setHead(oldNode);
            return oldNode.value;
        } else {
            return -1;
        }
    }
    public void removeNode(DoubleLinkedNode node) {
        DoubleLinkedNode prev = node.prev;
        DoubleLinkedNode post = node.next;
        if (prev != null) {
            prev.next = post;
        } else {
            head = post;
        }        
        if (post != null) {
            post.prev = prev;
        } else {
            tail = prev;
        }
    }
    
    public void setHead(DoubleLinkedNode node) {
        node.next = head;
        node.prev = null;//清空头部
        if (head != null) {
            head.prev = node;
        }
        head = node;
        if (tail == null) {
            tail = node;
        }
    }
    public void set(int key, int value) {
        if (map.containsKey(key)) {
            DoubleLinkedNode newNode = map.get(key);
            newNode.value = value;
            removeNode(newNode);
            setHead(newNode);
        } else {
            DoubleLinkedNode newNode = new DoubleLinkedNode(key, value);
            map.put(key, newNode);
            setHead(newNode);
            if (map.size() > capacity) {
                map.remove(tail.key);
                tail = tail.prev;
                tail.next = null;//清空尾巴
            }
        }
    }
    class DoubleLinkedNode {
        int key, value;
        DoubleLinkedNode prev, next;
        DoubleLinkedNode (int key, int value) {
            this.key = key;
            this.value = value;
            prev = null;
            next = null;
        }
    }
}
```
