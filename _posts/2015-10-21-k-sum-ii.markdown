---
layout: post
title: k Sum II
date: 2015-10-21 14:23:22.000000000 -04:00
tags:
- Leetcode
categories:
- DFS Backtracking
author: Jason
---
<p><strong><em>Given n unique integers, number k (1&lt;=k&lt;=n)  and target. Find all possible k integers where their sum is target.</em></strong></p>


``` java
public class Solution {
    /**
     * @param A: an integer array.
     * @param k: a positive integer (k <= length(A))
     * @param target: a integer
     * @return a list of lists of integer 
     */ 
    public ArrayList<ArrayList<integer>> kSumII(int A[], int k, int target) {
        ArrayList<ArrayList<integer>> result = new ArrayList<ArrayList<integer>>();
        if (A == null || A.length == 0) return result;
        
        ArrayList<integer> path = new ArrayList<integer>();
        helper(A, k, target, 0, path, result);
        return result;
    }
    
    public void helper(int[] A, int k, int target, int start, ArrayList<integer> path, ArrayList<ArrayList<integer>> result) {
        if (k < 0) return;
        if (k == 0 && target == 0) {
            result.add(new ArrayList<integer> (path));
            return;
        }
        for (int i = start; i < A.length; i++) {
            path.add(A[i]);
            helper(A, k - 1, target - A[i], i + 1, path, result);
            //bug i + 1 not start + 1
            path.remove(path.size() - 1);
        }
    }
}//dfs and back tracking
```
