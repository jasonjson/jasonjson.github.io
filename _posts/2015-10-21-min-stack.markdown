---
layout: post
title: Min Stack
date: 2015-10-21 13:00:24.000000000 -04:00
type: post
published: true
status: publish
categories:
- Data Structure
tags: []
meta:
  _wpcom_is_markdown: '1'
  _edit_last: '1'
  _wpas_done_all: '1'
  _spost_short_title: ''
  _jetpack_related_posts_cache: a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1469045782;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:442;}i:1;a:1:{s:2:"id";i:1058;}i:2;a:1:{s:2:"id";i:509;}}}}
author:
  login: johnny.lyy@gmail.com
  email: johnny.lyy@gmail.com
  display_name: johnny.lyy@gmail.com
  first_name: ''
  last_name: ''
---
<p><strong><em>Implement a stack with min() function, which will return the smallest number in the stack. It should support push, pop and min operation all in O(1) cost.</em></strong></p>
<p>[expand title="code"]</p>
<pre>
public class MinStack {
    Stack<integer> stack1;
    Stack<integer> stack2;
    public MinStack() {
        // do initialize if necessary
        stack1 = new Stack<integer>();
        stack2 = new Stack<integer>();
    }

    public void push(int number) {
        // write your code here
        stack1.push(number);
        if (stack2.isEmpty() || number <= stack2.peek()) {
            stack2.push(number); //bug <=, we also push element when it's equal to the min number so far, since we might have duplicate min numbers
        }
    }

    public int pop() {
        // write your code here
        int toRemove = stack1.pop();
        if (toRemove == stack2.peek()) {
            stack2.pop();
        }
        return toRemove;
    }

    public int min() {
        // write your code here
        return stack2.peek();
    }
}
</integer></integer></integer></integer></pre>
<p>[/expand]</p>
