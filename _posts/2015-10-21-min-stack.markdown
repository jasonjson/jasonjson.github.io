---
layout: post
title: 155 - Min Stack
date: 2015-10-21 13:00:24.000000000 -04:00
tags:
- Leetcode
categories:
- Data Structure
author: Jason
---
**Implement a stack with min() function, which will return the smallest number in the stack. It should support push, pop and min operation all in O(1) cost.**


``` java
public class MinStack {
    Stack<Integer> stack1;
    Stack<Integer> stack2;
    public MinStack() {
        // do initialize if necessary
        stack1 = new Stack<Integer>();
        stack2 = new Stack<Integer>();
    }

    public void push(int number) {
        // write your code here
        stack1.push(number);
        if (stack2.isEmpty() || number <= stack2.peek()) {
            stack2.push(number); //bug <=, we also push element when it's equal to the min number so far, since we might have duplicate min numbers
        }
    }

    public int pop() {
        // write your code here
        int toRemove = stack1.pop();
        if (toRemove == stack2.peek()) {
            stack2.pop();
        }
        return toRemove;
    }

    public int min() {
        // write your code here
        return stack2.peek();
    }
}
```

```python
class MinStack(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        self.min = 2 ** 31 - 1

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        if x <= self.min:
            self.stack.append(self.min)
            self.min = x
        self.stack.append(x)


    def pop(self):
        """
        :rtype: void
        """
        if self.stack[-1] == self.min:
            self.stack.pop()
            self.min = self.stack[-1]
        self.stack.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]

    def getMin(self):
        """
        :rtype: int
        """
        return self.min
```
