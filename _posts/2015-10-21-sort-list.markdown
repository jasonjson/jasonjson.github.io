---
layout: post
title: Sort List
date: 2015-10-21 02:49:10.000000000 -04:00
tags:
- Algorithm
categories:
- LinkedList
- Sorting
author: Jason
---
<p><strong><em>Sort a linked list in O(n log n) time using constant space complexity.</em></strong></p>


``` java
public class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null ) return head;
        ListNode slow = head, fast = head, prev = null;
        while (fast != null && fast.next != null) {
            prev = slow; // use prev to preserve the node before mid node
            fast = fast.next.next;
            slow = slow.next;
        }
        ListNode left = head;
        ListNode right = slow; 
        prev.next = null; // clear the end of left part, this is why we need prev
        ListNode sortedLeft = sortList(left);
        ListNode sortedRight = sortList(right);
        return merge(sortedLeft, sortedRight);
    }
    
    
    public ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }
        curr.next = l1 == null ? l2 : l1;
        return dummy.next;
    }
}
```
